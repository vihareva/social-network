{"version":3,"sources":["App.module.css","components/Navbar/Navbar.module.css","assets/Common.module.css","api/api.ts","redux/users-reducer.ts","components/common/Paginator.tsx","assets/userPhoto.jpg","components/Users/User.tsx","components/Users/FilterUsers.tsx","components/Users/Users.tsx","components/common/Preloader.tsx","components/Users/UsersContainer.tsx","redux/app-reducer.ts","redux/auth-reducer.ts","components/Login/Login.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Navbar/NavbarItem.tsx","components/Navbar/Navbar.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","redux/dialogs-reducer.ts","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Profile/ProfileInfo/ProfileDescriptionForm.tsx","components/Profile/ProfileInfo/Status/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDescription.tsx","components/Profile/ProfileInfo/ProfileContacts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Dialogs/Dialogs.module.css","components/common/Paginator.module.css","components/Navbar/NavbarItem.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Users/User.module.css","components/Login/Login.module.css","components/Header/Header.module.css","components/Users/Users.module.css"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPageNumber","pageSize","filter","get","term","friend","then","response","data","userId","delete","post","status","put","file","formData","FormData","append","authAPI","email","password","rememberMe","captcha","initialState","users","totalUsersCount","isFetching","followingInProgressIDs","newPortionNumber","followUnfollow","isFollowed","type","setUsers","setTotalUsersCount","setFilter","toggleIsFetching","toggleFollowingProgress","usersReducer","state","action","map","u","id","followed","Paginator","React","memo","props","pagesCount","Math","ceil","totalItemsCount","useState","portionNumber","setPortionNumber","useEffect","onPageChanged","firstPortionElement","pages","i","push","portionCount","length","portionSize","lastPortionElement","items","className","styles","paginatorCont","cs","container","pagesContainer","button","onClick","icon","faChevronLeft","p","currentPage","page","selectedPage","faChevronRight","User","user","s","userContainer","imgContainer","to","src","photos","small","userPhoto","descContainer","name","disabled","some","unfollow","follow","FilterUsers","useForm","defaultValues","String","mode","register","handleSubmit","reset","control","theme","createTheme","typography","fontFamily","fontWeightRegular","body1","color","h4","palette","primary","main","contrastText","onSubmit","filterValues","onFilterForm","ThemeProvider","style","display","justifyContent","FormControl","width","render","field","onChange","value","Select","MenuItem","TextField","margin","variant","marginTop","marginLeft","Users","usersContainer","Preloader","LinearProgress","UsersContainer","pageNumber","setCurrentPage","getUsers","search","this","history","location","parsedUrl","queryString","parse","substring","actualPageNumber","Number","actualFilter","prevProps","query","url","stringify","Component","compose","connect","usersPage","dispatch","a","resultCode","totalCount","withRouter","error","isInitialized","login","isAuth","setAuthUserData","getAuthUserData","getCaptchaUrl","resp","authReducer","Login","useDispatch","errors","formState","useSelector","st","auth","appError","app","loginContainer","captchaText","messages","marginBottom","message","input","required","pattern","minLength","FormControlLabel","label","Checkbox","checkedIcon","sx","borderRadius","alt","Header","header","cont","logout","HeaderContainer","NavbarItem","item","active","size","navlinkCont","activeClassName","activeLink","linkName","Navbar","nav","faHome","faSms","faUser","faNewspaper","faMusic","messageForNewPost","postData","v1","likesCount","date","profile","updateStatusAC","getUserProfile","updatePhoto","Post","large","fullName","faHeart","MyPosts","postElements","profilePage","postsBlock","addPostContainer","textarea","placeholder","e","updateNewPostText","currentTarget","addButton","Date","stringDate","getDay","getMonth","getFullYear","getHours","getMinutes","addPost","posts","MyPostsContainer","Object","keys","text","newPostText","postMessage","DialogItem","changeUser","activeUserId","Message","messageContainer","Dialogs","dialogsPage","dialogsData","setActiveUserId","setMessage","d","messagesData","m","addMessageContainer","sendMessage","id1","id2","id3","id4","id5","mapStateToProps","withAuthRedirect","restProps","sendMessageActionCreator","ProfileDescriptionForm","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","updateProfileDescription","switchOffEditMode","FormGroup","contact","contactName","ProfileStatus","editMode","setEditMode","setStatus","textHeader","autoFocus","onBlur","updateUserStatus","onDoubleClick","isOwner","desc","faPenNib","ProfileDescription","fileInput","useRef","mainBlock","mainProfileDescContainer","flex","ref","target","files","editButton","current","click","faImages","textAlign","jobDescContainer","buttonContainer","switchOnEditMode","faUserEdit","contactImages","github","faGithub","vk","faVk","facebook","faFacebookF","instagram","faInstagram","twitter","faTwitter","website","faLaptopHouse","youtube","faYoutube","mainLink","faPaperclip","ProfileContacts","contactsContainer","contactContainer","iconContainer","contactDescContainer","contactValue","href","ProfileInfo","Profile","ProfileContainer","match","params","getUserStatus","prevState","snapshot","App","initializeApp","appWrapper","appWrapperContent","path","DialogsContainer","promise","Promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","appStore","createStore","applyMiddleware","thunkMiddleware","ReactDOM","store","document","getElementById"],"mappings":"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","file":"static/js/main.62612dab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__Etu7z\",\"appWrapperContent\":\"App_appWrapperContent__3NrT9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3OPB_\",\"photo\":\"Navbar_photo__1i8Lu\",\"profile\":\"Navbar_profile__2-Txl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Common_container__23_ts\",\"button\":\"Common_button__BhW19\",\"input\":\"Common_input__2e8Qy\"};","import axios from \"axios\";\r\n\r\nimport {ProfileDescriptionFormDataType} from \"../components/Profile/ProfileInfo/ProfileDescriptionForm\";\r\nimport {FilterUsersDataType} from \"../redux/users-reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"6e9ab0a0-db04-48d5-b17f-32168bf67567\"\r\n    }\r\n});\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPageNumber: number, pageSize: number,filter:FilterUsersDataType) {\r\n        return instance.get<any>(`users?page=${currentPageNumber}&count=${pageSize}&term=${filter.term}&friend=${filter.friend}`)\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<any>(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<any>(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    getProfile(userId: number) {\r\n        return instance.get<any>(`profile/` + userId);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<any>(`/profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<any>(`/profile/status`, {status})\r\n    },\r\n    updatePhoto(file: File) {\r\n        const formData = new FormData();\r\n\r\n        formData.append('image', file);\r\n        return instance.put<any>(`/profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    updateProfileDescription(data: ProfileDescriptionFormDataType) {\r\n        return instance.put<any>(`/profile`, data)\r\n    },\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeTypeResponse>>(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: string | null = null) {\r\n        //return instance.post<FormDataType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login`, {email, password, rememberMe,captcha})\r\n        return instance.post<any>(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    },\r\n    getCaptchaUrl() {\r\n        return instance.get<{ url: string }>(`security/get-captcha-url`)\r\n    },\r\n}\r\n\r\ntype AuthMeTypeResponse = { id: number, email: string, login: string }\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 12,\r\n    totalUsersCount: 0,\r\n    currentPageNumber: 1,\r\n    isFetching: true,\r\n    followingInProgressIDs: [],\r\n    newPortionNumber: 1,\r\n    filter: {\r\n        term: '',\r\n        friend: null\r\n    }\r\n};\r\n\r\nexport type UserType = {\r\n    id: number,\r\n    photos: { small: string, large: string },\r\n    followed: boolean,\r\n    name: string,\r\n    status: string,\r\n    location: {\r\n        city: string,\r\n        country: string\r\n    }\r\n}\r\n\r\nexport type FilterUsersDataType = {\r\n    term: string,\r\n    friend: null |boolean\r\n}\r\n\r\nexport type usersStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPageNumber: number,\r\n    isFetching: boolean\r\n    followingInProgressIDs: number[],\r\n    newPortionNumber: number,\r\n    filter: FilterUsersDataType\r\n}\r\n\r\ntype setUsersActionType = {\r\n    type: 'SET_USERS',\r\n    users: Array<UserType>\r\n}\r\ntype setCurrentPageActionType = {\r\n    type: 'SET_CURRENT_PAGE',\r\n    currentPageNumber: number\r\n}\r\ntype setTotalUsersCountActionType = {\r\n    type: 'SET_TOTAL_USERS_COUNT',\r\n    totalUsersCount: number,\r\n}\r\ntype ToggleIsFetchingActionType = {\r\n    type: 'TOGGLE_IS_FETCHING',\r\n    isFetching: boolean\r\n}\r\ntype ToggleFollowingProgressActionType = {\r\n    type: 'TOGGLE_FOLLOWING_PROGRESS'\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\ntype setFilterActionType = ReturnType<typeof setFilter>\r\ntype FollowUnfollowActionType = ReturnType<typeof followUnfollow>\r\n\r\nexport type UsersActionsType = FollowUnfollowActionType\r\n    | setUsersActionType\r\n    | setCurrentPageActionType\r\n    | setTotalUsersCountActionType\r\n    | ToggleIsFetchingActionType\r\n    | ToggleFollowingProgressActionType\r\n    | setFilterActionType\r\n\r\nconst usersReducer = (state: usersStateType = initialState, action: UsersActionsType): usersStateType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW_UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: action.isFollowed}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case 'SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case \"SET_TOTAL_USERS_COUNT\": {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case \"SET_CURRENT_PAGE\": {\r\n            return {...state, currentPageNumber: action.currentPageNumber}\r\n        }\r\n        case \"TOGGLE_IS_FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case \"SET_FILTER\": {\r\n            return {...state, filter: action.filter}\r\n        }\r\n        case \"TOGGLE_FOLLOWING_PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgressIDs: action.isFetching\r\n                    ? [...state.followingInProgressIDs, action.userId]\r\n                    : state.followingInProgressIDs.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const followUnfollow = (userId: number, isFollowed: boolean) => ({\r\n    type: 'FOLLOW_UNFOLLOW',\r\n    userId,\r\n    isFollowed\r\n} as const)\r\nexport const setUsers = (users: Array<UserType>): setUsersActionType => ({type: 'SET_USERS', users})\r\nexport const setCurrentPage = (currentPageNumber: number): setCurrentPageActionType => ({\r\n    type: 'SET_CURRENT_PAGE',\r\n    currentPageNumber\r\n})\r\nexport const setTotalUsersCount = (totalUsersCount: number): setTotalUsersCountActionType => ({\r\n    type: 'SET_TOTAL_USERS_COUNT',\r\n    totalUsersCount\r\n})\r\nexport const setFilter = (filter: FilterUsersDataType) => ({\r\n    type: 'SET_FILTER',\r\n    filter\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingActionType => ({\r\n    type: 'TOGGLE_IS_FETCHING',\r\n    isFetching\r\n})\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressActionType => ({\r\n    type: 'TOGGLE_FOLLOWING_PROGRESS',\r\n    isFetching,\r\n    userId\r\n})\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number, filter:FilterUsersDataType): AppThunk => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n\r\n        let data = await usersAPI.getUsers(currentPage, pageSize, filter)\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n        dispatch(setFilter(filter));\r\n        dispatch(toggleIsFetching(false));\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n\r\n        let data = await usersAPI.follow(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(followUnfollow(userId, true));\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId));\r\n\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId));\r\n\r\n        let data = await usersAPI.unfollow(userId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(followUnfollow(userId, false));\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId));\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n","import styles from './Paginator.module.css';\r\nimport React, {useEffect, useState} from \"react\";\r\nimport cs from \"../../assets/Common.module.css\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faChevronLeft, faChevronRight} from '@fortawesome/free-solid-svg-icons'\r\nimport {UserType} from \"../../redux/users-reducer\";\r\n\r\ntype PaginatorPropsType = {\r\n    portionSize: number\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    items: Array<UserType>\r\n}\r\n\r\nexport let Paginator = React.memo((props: PaginatorPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n\r\n    useEffect(() => {\r\n        props.onPageChanged(firstPortionElement);\r\n    }, [portionNumber])\r\n\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pages.length / props.portionSize);\r\n    let firstPortionElement = (portionNumber - 1) * props.portionSize + 1;\r\n    let lastPortionElement = portionNumber * props.portionSize;\r\n\r\n    return <>\r\n        {props.items.length\r\n            ? <div className={styles.paginatorCont}>\r\n                <div className={` ${cs.container} ${styles.pagesContainer} `}>\r\n                    {portionNumber > 1 &&\r\n                        <span className={styles.button} onClick={() => setPortionNumber(portionNumber - 1)}>\r\n                             <FontAwesomeIcon icon={faChevronLeft}/>\r\n                        </span>}\r\n                    {pages.map(p => {\r\n                        if (p >= firstPortionElement && p <= lastPortionElement)\r\n                            return <span\r\n                                className={props.currentPage === p ? `${styles.page} ${styles.selectedPage}` : styles.page}\r\n                                onClick={() => {\r\n                                    props.onPageChanged(p);\r\n                                }}>{p}</span>\r\n                    })}\r\n                    {portionNumber < portionCount\r\n                    && <span className={styles.button} onClick={() => setPortionNumber(portionNumber + 1)}>\r\n                         <FontAwesomeIcon icon={faChevronRight}/>\r\n                    </span>}\r\n                </div>\r\n            </div>\r\n            : <div></div>}\r\n    </>\r\n})","export default __webpack_public_path__ + \"static/media/userPhoto.7cb79308.jpg\";","import {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../assets/userPhoto.jpg\";\r\nimport styles from \"./Users.module.css\";\r\nimport cs from \"../../assets/Common.module.css\";\r\nimport s from \"./User.module.css\";\r\nimport React from \"react\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    followingInProgressIDs: number[]\r\n}\r\n\r\nexport let User = ({user, ...props}: UserPropsType) => {\r\n\r\n    return <div className={`${cs.container} ${s.userContainer}`}>\r\n        <div className={s.imgContainer}>\r\n            <NavLink to={'/profile/' + user.id}>\r\n                <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                     className={styles.userPhoto}/>\r\n            </NavLink>\r\n        </div>\r\n        <div className={s.descContainer}>\r\n            <div className={s.name}>{user.name}</div>\r\n            <div className={s.status}>{user.status}</div>\r\n        </div>\r\n        <div>\r\n            {user.followed\r\n                ? <button className={cs.button}\r\n                          disabled={props.followingInProgressIDs.some(id => id === user.id)}\r\n                          onClick={() => {\r\n                              props.unfollow(user.id)\r\n                          }}>Unfollow</button>\r\n                : <button className={cs.button}\r\n                          disabled={props.followingInProgressIDs.some(id => id === user.id)}\r\n                          onClick={() => {\r\n                              props.follow(user.id)\r\n                          }}>Follow</button>}\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {createTheme, FormControl, MenuItem, Select, TextField, ThemeProvider} from \"@mui/material\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {FilterUsersDataType} from \"../../redux/users-reducer\";\r\nimport cs from \"../../assets/Common.module.css\";\r\n\r\ntype FilterUsersPropsType = {\r\n    onFilterForm: (filter: FilterUsersDataType) => void\r\n    filter: FilterUsersDataType\r\n}\r\ntype FriendType = 'null' | 'true' | 'false'\r\ntype FilterFormUsersDataType = {\r\n    term: string,\r\n    friend: FriendType\r\n}\r\n\r\nexport const FilterUsers = React.memo((props: FilterUsersPropsType) => {\r\n\r\n    const {register, handleSubmit, reset, control,} = useForm<FilterFormUsersDataType>({\r\n        defaultValues: {term: props.filter.term, friend: String(props.filter.friend) as FriendType},\r\n        mode: 'onSubmit'\r\n    });\r\n\r\n    useEffect(() => {\r\n        reset({term: props.filter.term, friend: String(props.filter.friend) as FriendType});\r\n    }, [props.filter])\r\n\r\n    const onSubmit = (data: FilterFormUsersDataType) => {\r\n        const filterValues = {\r\n            term: data.term,\r\n            friend: data.friend === 'null' ? null : data.friend === 'true' ? true : false\r\n        }\r\n\r\n        props.onFilterForm(filterValues)\r\n    }\r\n\r\n    const theme = createTheme({\r\n        typography: {\r\n            fontFamily: `\"Montserrat\",  sans-serif`,\r\n            fontWeightRegular: 600,\r\n            body1: {\r\n                color: '#4c4c4c'\r\n            },\r\n            h4:{\r\n                color: \"red\"\r\n            },\r\n        },\r\n        palette: {\r\n            primary: {\r\n                main: '#104f9e',\r\n                contrastText: '#6d6b6b'\r\n            }\r\n        }\r\n    })\r\n\r\n    return <div>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <ThemeProvider theme={theme}>\r\n                <div style={{display:\"flex\", justifyContent:\"center\"}}>\r\n                    <FormControl style={{width: '64%'}}>\r\n                        <Controller\r\n                            control={control}\r\n                            name=\"friend\"\r\n                            render={({ field: { onChange, value } }) => (\r\n                                <Select value={value} onChange={onChange} >\r\n                                    <MenuItem value={'true'}>Friends</MenuItem>\r\n                                    <MenuItem value={'false'}>Not followed users</MenuItem>\r\n                                    <MenuItem value={'null'}>All users</MenuItem>\r\n                                </Select>\r\n\r\n                            )}\r\n                        />\r\n                    </FormControl>\r\n                </div>\r\n                <div style={{display:\"flex\", justifyContent:\"center\"}} >\r\n                    <TextField style={{width: '50%'}}\r\n                    margin=\"normal\" variant=\"standard\"\r\n                    {...register('term')}\r\n                />\r\n                    <button type={'submit'} style={{marginTop: '10px', marginLeft: '10px'}} className={`${cs.button}`}>\r\n                        Find\r\n                    </button>\r\n                </div>\r\n            </ThemeProvider>\r\n        </form>\r\n    </div>\r\n})","import React from 'react';\r\nimport {FilterUsersDataType, UserType} from \"../../redux/users-reducer\";\r\nimport {Paginator} from \"../common/Paginator\";\r\nimport {User} from \"./User\";\r\nimport styles from './Users.module.css';\r\nimport {FilterUsers} from \"./FilterUsers\";\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    followingInProgressIDs: number[]\r\n    filter: FilterUsersDataType\r\n    onFilterForm: (filter: FilterUsersDataType) => void\r\n}\r\n\r\nlet Users = React.memo((props: UsersPropsType) => {\r\n\r\n    return <div>\r\n        <FilterUsers filter={props.filter} onFilterForm={props.onFilterForm}/>\r\n        <Paginator totalItemsCount={props.totalUsersCount} pageSize={props.pageSize}\r\n                   currentPage={props.currentPage} onPageChanged={props.onPageChanged}\r\n                   portionSize={5} items={props.users}/>\r\n\r\n        {props.users.length\r\n            ? <div className={styles.usersContainer}>\r\n                {props.users.map(u => <User key={u.id}\r\n                                            user={u}\r\n                                            follow={props.follow}\r\n                                            followingInProgressIDs={props.followingInProgressIDs}\r\n                                            toggleFollowingProgress={props.toggleFollowingProgress}\r\n                                            unfollow={props.unfollow}/>)}\r\n            </div>\r\n            : <div style={{display:\"flex\", justifyContent:\"center\"}}>Users not found</div>}\r\n    </div>\r\n})\r\n\r\nexport default Users;","import React from 'react';\r\nimport {createTheme, LinearProgress, ThemeProvider} from \"@mui/material\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#104f9e'\r\n        }\r\n    }\r\n})\r\nlet Preloader = () => {\r\n    return <ThemeProvider theme={theme}>\r\n        <LinearProgress/>\r\n    </ThemeProvider>\r\n}\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    follow,\r\n    setCurrentPage,\r\n    setUsers,\r\n    setTotalUsersCount,\r\n    toggleIsFetching,\r\n    unfollow, UserType, toggleFollowingProgress, getUsers, FilterUsersDataType,\r\n} from '../../redux/users-reducer';\r\nimport Users from '../Users/Users';\r\nimport Preloader from \"../common/Preloader\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport queryString from 'querystring'\r\n\r\ntype QueryParamsType = { term?: string, friend?: string, page?: string }\r\n\r\nclass UsersContainer extends React.Component<RouteComponentProps & UsersPropsType> {\r\n    componentDidMount() {\r\n\r\n        const {search} = this.props.history.location\r\n        const parsedUrl = queryString.parse(search.substring(1)) as QueryParamsType\r\n\r\n        let actualPageNumber = this.props.currentPageNumber;\r\n        if (!!parsedUrl.page) {\r\n            actualPageNumber = Number(parsedUrl.page)\r\n        }\r\n\r\n        let actualFilter = this.props.filter;\r\n        if (!!parsedUrl.term) {\r\n            actualFilter = {...actualFilter, term: parsedUrl.term}\r\n        }\r\n        switch(parsedUrl.friend){\r\n            case 'null': {\r\n                actualFilter = {...actualFilter, friend: null}\r\n            break;\r\n            }\r\n            case 'true':{\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            }\r\n            case 'false':{\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.props.getUsers(actualPageNumber, this.props.pageSize, actualFilter)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: UsersPropsType) {\r\n        if (this.props.filter !== prevProps.filter || this.props.currentPageNumber !== prevProps.currentPageNumber) {\r\n            const query:QueryParamsType={}\r\n            if(!!this.props.filter.term) query.term=this.props.filter.term\r\n            if(this.props.currentPageNumber!==1) query.page=String(this.props.currentPageNumber)\r\n            if(this.props.filter.friend!==null) query.friend=String(this.props.filter.friend)\r\n            const url = queryString.stringify(query)\r\n            this.props.history.push('?'+ url, '/users')\r\n        }\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.getUsers(pageNumber, this.props.pageSize, this.props.filter)\r\n    }\r\n\r\n    onFilterForm = (filter: FilterUsersDataType) => {\r\n        this.props.setCurrentPage(1);\r\n        this.props.getUsers(1, this.props.pageSize, filter)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPageNumber}\r\n                   onPageChanged={this.onPageChanged}\r\n                   onFilterForm={this.onFilterForm}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgressIDs={this.props.followingInProgressIDs}\r\n                   toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                   filter={this.props.filter}\r\n            />\r\n        </>\r\n    }\r\n\r\n}\r\n\r\ntype UsersPropsType = mapStateToPropsType & mapDispatchToPropsType;\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPageNumber: number,\r\n    isFetching: boolean,\r\n    followingInProgressIDs: number[],\r\n    filter: FilterUsersDataType\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPageNumber: state.usersPage.currentPageNumber,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgressIDs: state.usersPage.followingInProgressIDs,\r\n        filter: state.usersPage.filter\r\n    }\r\n}\r\ntype mapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (currentPageNumber: number) => void\r\n    setTotalUsersCount: (totalUsersCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number, filter: FilterUsersDataType) => void\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow, unfollow, setUsers,\r\n        setCurrentPage, setTotalUsersCount,\r\n        toggleIsFetching, toggleFollowingProgress,\r\n        getUsers\r\n    }),\r\n    withRouter)(UsersContainer);","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nconst initialState: InitialStateType = {\r\n    error: null,\r\n    isInitialized: false\r\n}\r\nexport type InitialStateType = {\r\n    error: string | null,\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized:true}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitializedAC = () => ({type: 'APP/SET-INITIALIZED'} as const)\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\nexport type AppActionsType =\r\n    | SetAppErrorActionType\r\n    | SetIsInitializedActionType\r\n\r\nexport const initializeApp=():AppThunk=>{\r\n    return (dispatch)=>{\r\n      let promise= dispatch(getAuthUserData())\r\n        //...dispatches\r\n        //when all promises are resolved we'll initialize app\r\n           Promise.all([promise]).then(()=>{\r\n            dispatch(setIsInitializedAC())\r\n        })\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {AppThunk} from \"./redux-store\";\r\nimport {setAppErrorAC} from \"./app-reducer\";\r\n\r\nexport type authDataType = {\r\n    id: null | number,\r\n    email: null | string,\r\n    login: null | string,\r\n    isAuth: boolean,\r\n    captcha: string | null\r\n}\r\n\r\ntype SetAuthUserDataActionType = ReturnType<typeof setAuthUserData>\r\ntype setCaptchaUrlActionType = ReturnType<typeof setCaptchaUrl>\r\n\r\nexport type AuthActionsType = SetAuthUserDataActionType | setCaptchaUrlActionType;\r\n\r\nlet initialState:authDataType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captcha: null\r\n};\r\n\r\nconst authReducer = (state: authDataType = initialState, action: AuthActionsType): authDataType => {\r\n    switch (action.type) {\r\n        case 'SET_USER_DATA':\r\n        case \"SET_CAPTCHA_URL\":\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: null | number, email: null | string, login: null | string, isAuth: boolean) => {\r\n    return {\r\n        type: 'SET_USER_DATA',\r\n        data: {id, email, login, isAuth}\r\n    } as const\r\n}\r\nexport const setCaptchaUrl = (captcha: string) => {\r\n    return {\r\n        type: 'SET_CAPTCHA_URL',\r\n        data: {captcha}\r\n    } as const\r\n}\r\n\r\nexport const getAuthUserData = () => (dispatch: Dispatch) => {\r\n    return authAPI.me()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data;\r\n                dispatch(setAuthUserData(id, email, login, true));\r\n            }\r\n        });\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string | null): AppThunk => {\r\n    return (dispatch) => {\r\n        authAPI.login(email, password, rememberMe, captcha)\r\n            .then(resp => {\r\n                if (resp.data.resultCode === 0) {\r\n                    dispatch(getAuthUserData());\r\n                } else {\r\n                    if (resp.data.resultCode === 10) {\r\n                        dispatch(getCaptchaUrl())\r\n                    }\r\n                    if (resp.data.messages.length) {\r\n                        dispatch(setAppErrorAC(resp.data.messages[0]))\r\n                    }\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): AppThunk => {\r\n    return (dispatch) => {\r\n        authAPI.getCaptchaUrl()\r\n            .then(resp => {\r\n                dispatch(setCaptchaUrl(resp.data.url));\r\n            })\r\n    }\r\n}\r\n\r\nexport const logout = (): AppThunk => {\r\n    return (dispatch) => {\r\n        authAPI.logout()\r\n            .then(resp => {\r\n                if (resp.data.resultCode === 0) {\r\n                    dispatch(setAuthUserData(null, null, null, false));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport CircleCheckedFilled from '@mui/icons-material/CheckCircle';\r\nimport CircleUnchecked from '@mui/icons-material/RadioButtonUnchecked';\r\nimport {\r\n    Checkbox,\r\n    createTheme,\r\n    FormControlLabel,\r\n    ThemeProvider\r\n} from \"@mui/material\";\r\nimport {useForm} from 'react-hook-form';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport cs from \"../../assets/Common.module.css\";\r\nimport s from './Login.module.css'\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captchaText: string | null\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const {register, handleSubmit,  formState: {errors}} = useForm<FormDataType>({mode: 'onBlur'});\r\n    const isAuth = useSelector<AppStateType, boolean>(st => st.auth.isAuth);\r\n    const captcha = useSelector<AppStateType, string | null>(st => st.auth.captcha);\r\n    const appError = useSelector<AppStateType, string | null>(st => st.app.error)\r\n\r\n    const onSubmit = (data: FormDataType) => {\r\n        const {email, password, rememberMe, captchaText} = data\r\n        dispatch(login(email, password, rememberMe, captchaText));\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    const theme = createTheme({\r\n        typography: {\r\n            fontFamily: `\"Montserrat\",  sans-serif`,\r\n            fontWeightRegular: 500,\r\n        }\r\n    })\r\n\r\n    return <div className={s.loginContainer}>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className={`${cs.container} ${s.container}`}>\r\n                <div style={{marginBottom: '25px'}}>\r\n                    <div>To log in, use my accout credentials:</div>\r\n                    <div>viharevakatia@gmail.com</div>\r\n                    <div>qwerty123</div>\r\n                </div>\r\n\r\n                {errors?.email &&\r\n                <div style={{color: 'red'}}>{errors?.email?.message || 'error'}</div>}\r\n                <input className={`${cs.input}  ${s.input}`}\r\n                       {...register('email', {\r\n                           required: 'required',\r\n                           pattern: {\r\n                               message: 'invalid email',\r\n                               value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i\r\n                           }\r\n                       })}\r\n                />\r\n\r\n                {errors?.password &&\r\n                <div style={{color: 'red'}}>{errors?.password?.message || 'error'}</div>}\r\n                <input className={`${cs.input}  ${s.input}`} type=\"password\"\r\n                       {...register('password', {\r\n                           required: 'required',\r\n                           minLength: {\r\n                               value: 4,\r\n                               message: 'min 4 symbols'\r\n                           }\r\n                       })}\r\n                />\r\n\r\n                <div style={{marginBottom: '25px'}} >\r\n                    <ThemeProvider theme={theme}>\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={\r\n                                              <Checkbox\r\n                                                  icon={<CircleUnchecked/>}\r\n                                                  checkedIcon={<CircleCheckedFilled/>}\r\n                                                  sx={{\r\n                                                      color: \"#104f9e\",\r\n                                                      '&.Mui-checked': {\r\n                                                          color: \"#104f9e\",\r\n                                                      },\r\n                                                      borderRadius: '50%',\r\n                                                  }}  {...register('rememberMe')}\r\n                                              />\r\n                                          }\r\n                        />\r\n                    </ThemeProvider>\r\n                </div>\r\n\r\n                {captcha && <div>\r\n                    <div><img src={captcha} alt=\"\"/></div>\r\n                    <input className={`${cs.input}  ${s.input}`}\r\n                                    {...register('captchaText', {\r\n                               required: 'required'\r\n                           })}\r\n                    />\r\n                </div>}\r\n                    <button type={'submit'} className={`${cs.button}`}>\r\n                        Login\r\n                    </button>\r\n                {appError && <div style={{color:'red'}}>{appError} </div>}\r\n            </div>\r\n        </form>\r\n    </div>\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Header.module.css';\r\nimport {HeaderContainerType} from \"./HeaderContainer\";\r\nimport cs from \"../../assets/Common.module.css\";\r\n\r\nconst Header = (props: HeaderContainerType) => {\r\n\r\n    return <header className={s.header}>\r\n        <div>\r\n            <div className={s.cont}>\r\n            {props.isAuth ?\r\n                   <>\r\n                       <div  className={s.login}>{props.login}</div>\r\n                       <div>\r\n                           <button className={`${s.button} ${cs.button}`} onClick={props.logout}> Log out</button>\r\n                       </div>\r\n                   </>\r\n                : <NavLink className={`${s.button} ${cs.button}`}  to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </div>\r\n    </header>\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: null | string\r\n}\r\ntype mapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nexport type HeaderContainerType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n});\r\n\r\nexport default connect(mapStateToProps, { logout})(HeaderContainer);","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {IconDefinition} from \"@fortawesome/fontawesome-common-types\";\r\nimport {SizeProp} from \"@fortawesome/fontawesome-svg-core\";\r\nimport s from './NavbarItem.module.css';\r\n\r\n\r\ntype NavbarItemPropsType = {\r\n    icon: IconDefinition,\r\n    size: SizeProp\r\n    to: string\r\n    linkName: string\r\n}\r\nconst NavbarItem = (props: NavbarItemPropsType) => {\r\n\r\n    return (<>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <div className={s.icon}>\r\n                    <FontAwesomeIcon icon={props.icon} size={props.size}/>\r\n                </div>\r\n                {/*<NavLink to=\"/profile\" className={s.item} activeClassName={s.activeLink}>Profile</NavLink>*/\r\n                }\r\n                <div className={s.navlinkCont}>\r\n                       <NavLink to={props.to} className={s.item} activeClassName={s.activeLink}>{props.linkName}</NavLink>\r\n                   </div>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default NavbarItem;","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport cs from '../../assets/Common.module.css';\r\nimport {faHome, faMusic, faNewspaper, faSms, faUser} from \"@fortawesome/free-solid-svg-icons\";\r\nimport NavbarItem from \"./NavbarItem\";\r\n\r\nconst Navbar = () => {\r\n\r\n    return (\r\n        <div className={s.nav}>\r\n            <div className={cs.container}>\r\n                <NavbarItem icon={faHome} size={\"lg\"} to=\"/profile\" linkName={'Profile'}/>\r\n                <NavbarItem icon={faSms} size={\"lg\"} to=\"/dialogs\" linkName={'Messages'}/>\r\n                <NavbarItem icon={faUser} size={\"lg\"} to=\"/users\" linkName={'Find Users'}/>\r\n                <NavbarItem icon={faNewspaper} size={\"lg\"} to=\"/posts\" linkName={'Posts'}/>\r\n                <NavbarItem icon={faMusic} size={\"lg\"} to=\"/music\" linkName={'Music'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Navbar;","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {AppThunk} from \"./redux-store\";\r\nimport {ProfileDescriptionFormDataType} from \"../components/Profile/ProfileInfo/ProfileDescriptionForm\";\r\nimport {v1} from \"uuid\";\r\nimport {toggleIsFetching} from \"./users-reducer\";\r\n\r\nexport type postDataType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n    date: string\r\n}\r\n\r\nexport type profilePageType = {\r\n    messageForNewPost: string,\r\n    postData: Array<postDataType>\r\n    profile: ProfileType\r\n    status: string\r\n}\r\n\r\nexport type photosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    photos: photosType,\r\n    userId: number\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    aboutMe: string,\r\n    contacts: ContactsType\r\n}\r\n\r\nexport type ContactsType = {\r\n    github: string,\r\n    vk: string,\r\n    facebook: string,\r\n    instagram: string,\r\n    twitter: string,\r\n    website: string,\r\n    youtube: string,\r\n    mainLink: string\r\n}\r\n\r\ntype setUserStatusActionType = ReturnType<typeof setUserStatus>\r\ntype AddPostActionType = {\r\n    type: \"ADD-POST\",\r\n    postMessage: string\r\n    date: string\r\n}\r\ntype UpdateNewPostTextActionType = {\r\n    type: \"UPDATE-NEW-POST-TEXT\"\r\n    newPostText: string\r\n}\r\ntype setProfileActionType = {\r\n    type: 'SET_USER_PROFILE',\r\n    profile: ProfileType\r\n}\r\ntype updatePhotoActionType = ReturnType<typeof updatePhotoAC>\r\ntype updateUserStatusActionType = ReturnType<typeof updateStatusAC>\r\n\r\nexport type ProfileActionType = AddPostActionType\r\n    | UpdateNewPostTextActionType\r\n    | setProfileActionType\r\n    | setUserStatusActionType\r\n    | updateUserStatusActionType\r\n    | updatePhotoActionType\r\n\r\nlet initialState = {\r\n    messageForNewPost: '',\r\n    postData: [\r\n        {id: v1(), message: 'Hi, how are you?', likesCount: 12, date: '18.06.2021 at 18:25 '},\r\n        {id: v1(), message: 'It\\'s my first post', likesCount: 11, date: '04.05.2021 at 21:50'},\r\n        {id: v1(), message: 'I am so fine today', likesCount: 11, date: '28.07.2021 at 04:17'}\r\n    ],\r\n    profile: {} as ProfileType,\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state: profilePageType = initialState, action: ProfileActionType): profilePageType => {\r\n    switch (action.type) {\r\n        case 'ADD-POST':\r\n            return {\r\n                ...state,\r\n                postData: [\r\n                    {id: v1(), message: action.postMessage, likesCount: 0, date: action.date},\r\n                    ...state.postData\r\n                ],\r\n                messageForNewPost: ''\r\n            }\r\n        case \"UPDATE-NEW-POST-TEXT\":\r\n            return {...state, messageForNewPost: action.newPostText}\r\n        case 'SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case \"SET_USER_STATUS\": {\r\n            return {...state, status: action.status}\r\n        }\r\n        case \"UPDATE_USER_STATUS\": {\r\n            return {...state, status: action.status}\r\n        }\r\n        case \"UPDATE_PHOTO\": {\r\n            return {...state, profile: {...state.profile, photos: action.photos}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport let addPost = (postMessage: string, date: string): AddPostActionType => {\r\n    return {type: \"ADD-POST\", postMessage, date}\r\n}\r\nexport let updateNewPostText = (text: string): UpdateNewPostTextActionType => {\r\n    return {type: \"UPDATE-NEW-POST-TEXT\", newPostText: text}\r\n}\r\n\r\nexport let setUserProfile = (profile: ProfileType): setProfileActionType => {\r\n    return {type: \"SET_USER_PROFILE\", profile}\r\n}\r\nexport let setUserStatus = (status: string) => {\r\n    return {type: \"SET_USER_STATUS\", status} as const\r\n}\r\nexport let updatePhotoAC = (photos: photosType) => {\r\n    return {type: \"UPDATE_PHOTO\", photos} as const\r\n}\r\nexport let updateStatusAC = (status: string) => {\r\n    return {type: \"UPDATE_USER_STATUS\", status} as const\r\n}\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: Dispatch) => {\r\n    dispatch(toggleIsFetching(true));\r\n    let response = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data));\r\n    dispatch(toggleIsFetching(false));\r\n}\r\n\r\nexport const getUserStatus = (userId: number) => async (dispatch: Dispatch) => {\r\n    let response = await usersAPI.getStatus(userId);\r\n    dispatch(setUserStatus(response.data));\r\n}\r\n\r\nexport const updateUserStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    let resp = await usersAPI.updateStatus(status)\r\n    if (resp.data.resultCode === 0) {\r\n        dispatch(updateStatusAC(status));\r\n    }\r\n}\r\n\r\nexport const updateProfileDescription = (data: ProfileDescriptionFormDataType, id: number): AppThunk => async (dispatch) => {\r\n    let resp = await usersAPI.updateProfileDescription(data)\r\n    if (resp.data.resultCode === 0) {\r\n        dispatch(getUserProfile(id));\r\n    }\r\n}\r\n\r\nexport const updatePhoto = (file: File) => async (dispatch: Dispatch) => {\r\n    let resp = await usersAPI.updatePhoto(file)\r\n    if (resp.data.resultCode === 0) {\r\n        dispatch(updatePhotoAC(resp.data.data.photos));\r\n    }\r\n}\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport userPhoto from '../../../../assets/userPhoto.jpg'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport cs from \"../../../../assets/Common.module.css\";\r\nimport {faHeart} from '@fortawesome/free-solid-svg-icons'\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\n\r\ntype PostType={\r\n    message: string\r\n    likesCount: number\r\n    profile: ProfileType\r\n    date:string\r\n}\r\nconst Post = (props: PostType) => {\r\n\r\n    return (\r\n        <div className={`${cs.container} ${s.container}`}>\r\n            <div className={s.descContainer}>\r\n                <img className={s.userPhoto} src={props.profile.photos.large ? props.profile.photos.large : userPhoto}/>\r\n                <div>\r\n                    <div className={s.name}>{props.profile.fullName}</div>\r\n                    <div className={s.date}>{props.date}</div>\r\n                </div>\r\n            </div>\r\n            <p className={s.item}>{props.message }</p>\r\n            <div>\r\n                <span> <FontAwesomeIcon icon={faHeart}/> </span> { props.likesCount }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { profilePageType} from \"../../../redux/profile-reducer\";\r\nimport cs from \"../../../assets/Common.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PostsPropsType = {\r\n    profilePage: profilePageType\r\n    isAuth: boolean\r\n    addPost: (postMessage: string, date: string) => void\r\n    updateNewPostText: (body: string) => void\r\n}\r\nconst MyPosts = (props: PostsPropsType) => {\r\n\r\n    if (!props.isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    let postElements = props.profilePage.postData.map(p => <Post key={p.id} profile={props.profilePage.profile} date= {p.date} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const addPost = () => {\r\n        let date=new Date()\r\n        let stringDay=date.getDay()+ '.'+date.getMonth()+ '.'+date.getFullYear()\r\n        let stringTime=date.getHours()+ ':'+ date.getMinutes()\r\n        let stringDate=stringDay+ ' at '+stringTime\r\n        props.addPost(props.profilePage.messageForNewPost, stringDate)\r\n    }\r\n\r\n    const newTextChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPostText(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div>\r\n                <div className={`${cs.container} ${s.addPostContainer}`}>\r\n                    <div className={s.header}>My posts</div>\r\n                    <textarea className={`${cs.input} ${s.textarea}`}\r\n                              placeholder=\"What's new?\"\r\n                              value={props.profilePage.messageForNewPost}\r\n                              onChange={newTextChangeHandler}/>\r\n                    <div>\r\n                        <button className={`${cs.button} ${s.addButton}`} onClick={addPost}>Add post</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={s.posts}>\r\n                    {postElements}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPost, getUserProfile, profilePageType, updateNewPostText} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {RouteComponentProps} from \"react-router-dom\";\r\nimport Preloader from \"../../common/Preloader\";\r\n\r\ntype mapStateToPropsType = {\r\n    profilePage: profilePageType\r\n    isAuth: boolean\r\n    userId:number | null\r\n    isFetching: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPost: (postMessage: string, date: string) => void\r\n    updateNewPostText: (body: string) => void\r\n    getUserProfile: (userId: number) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n        isAuth: state.auth.isAuth,\r\n        isFetching: state.usersPage.isFetching,\r\n        userId: state.auth.id\r\n    }\r\n}\r\n\r\nclass MyPostsContainer extends React.Component<RouteComponentProps & MyPostsContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        if(Object.keys(this.props.profilePage.profile).length === 0){\r\n            this.props.userId\r\n                ?this.props.getUserProfile(this.props.userId)\r\n                : this.props.history.push('/login');\r\n        }\r\n     }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            {\r\n                Object.keys(this.props.profilePage.profile).length !== 0\r\n                    ? <MyPosts profilePage={this.props.profilePage} isAuth={this.props.isAuth}\r\n                                                         addPost={this.props.addPost} updateNewPostText={this.props.updateNewPostText}/>\r\n                    :<></>\r\n            }\r\n        </>\r\n    }\r\n\r\n}\r\n\r\ntype MyPostsContainerPropsType = mapStateToPropsType & mapDispatchToPropsType;\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {updateNewPostText,getUserProfile,addPost}))(MyPostsContainer);","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport userPhoto from \"../../../assets/userPhoto.jpg\";\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: string\r\n    changeUser: (id: string)=>void\r\n    activeUserId: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n\r\n    return <div className={s.userContainer}>\r\n        <div onClick={()=>props.changeUser(props.id)}>\r\n            <img className={s.userPhoto} src={userPhoto}/>\r\n        </div>\r\n        <div className={props.id===props.activeUserId? `${s.name} ${s.active}`:`${s.name}` }>\r\n            {props.name}\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport cs from \"../../../assets/Common.module.css\";\r\n\r\ntype MessageType={\r\n    message: string\r\n    userId: string\r\n}\r\n\r\nconst Message = (props:MessageType ) => {\r\n    return <div className={`${cs.container} ${s.messageContainer}`}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport cs from \"../../assets/Common.module.css\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let id = useSelector<AppStateType, string>(st => st.dialogsPage.dialogsData[0].id)\r\n\r\n    let [activeUserId, setActiveUserId] = useState(id)\r\n    let [message, setMessage] = useState('')\r\n\r\n    const newTextChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setMessage(e.currentTarget.value)\r\n    }\r\n    const changeUser = (id: string) => {\r\n        setActiveUserId(id)\r\n    }\r\n    const sendMessage = () => {\r\n        props.sendMessage(message, activeUserId)\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={`${cs.container} ${s.usersContainer}`}>\r\n                {props.dialogsPage.dialogsData.map(d => <DialogItem key={d.id} activeUserId={activeUserId} changeUser={changeUser}\r\n                                                                    name={d.name} id={d.id}/>)}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{props.dialogsPage.messagesData[activeUserId]\r\n                    .map(m => <Message key={m.id} userId={activeUserId} message={m.message}/>)}\r\n                </div>\r\n\r\n                <div className={`${cs.container} ${s.addMessageContainer}`}>\r\n                   <textarea className={`${cs.input} ${s.textarea}`} value={message}\r\n                             placeholder='Enter your message'\r\n                             onChange={newTextChangeHandler}/>\r\n                    <div>\r\n                        <button className={`${s.button} ${cs.button}`}\r\n                                onClick={sendMessage}> Send\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import {v1} from \"uuid\";\r\n\r\nexport type DialogsDataType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type MessagesDataType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type messagesPageType = {\r\n    dialogsData: Array<DialogsDataType>\r\n    messagesData: { [key: string]: Array<MessagesDataType> }\r\n}\r\nlet id1 = v1();\r\nlet id2 = v1();\r\nlet id3 = v1();\r\nlet id4 = v1();\r\nlet id5 = v1();\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: id1, name: 'Michael'},\r\n        {id: id2, name: 'Alex'},\r\n        {id: id3, name: 'Elizaveta'},\r\n        {id: id4, name: 'Roman'},\r\n        {id: id5, name: 'Vladimir'},\r\n    ],\r\n    messagesData: {\r\n        [id1]: [\r\n            {id: v1(), message: 'my team had a debate on what the best looping variable name is'},\r\n            {id: v1(), message: 'i won'},\r\n            {id: v1(), message: 'junior dev makes a mistake: \"im so fired, my career is over\"'},\r\n            {id: v1(), message: 'senior dev makes a mistake: \"lol hey guys look at this dumb shit i did\"'},\r\n        ],\r\n        [id2]: [\r\n            {id: v1(), message: '-my mate needs a website designing, told him 500$. i have sent him your number'},\r\n            {id: v1(), message: '-what? how big is the website?'},\r\n            {id: v1(), message: '-normal screen size'},\r\n        ],\r\n        [id3]: [\r\n            {\r\n                id: v1(), message: 'teacher: if i have 0.1 apples in pne hand and 0.2 apples in the other hand,' +\r\n                    ' how many apples do i have'\r\n            },\r\n            {id: v1(), message: 'Javascript:0.30000000000000004 '},\r\n        ],\r\n        [id4]: [\r\n            {id: v1(), message: 'coworker: so how did you solve the bug?'},\r\n            {id: v1(), message: 'me:ostrich algorithm'},\r\n            {\r\n                id: v1(), message: '*In computer science, the ostrich algorithm is a strategy of ignoring potential' +\r\n                    ' problems on the basis that they may be exceedingly rare. It is named after the ostrich ' +\r\n                    'effect which is defined as \"to stick one\\'s head in the sand and pretend there is no problem\". ' +\r\n                    'It is used when it is more cost-effective to allow the problem to occur than to attempt its prevention.*'\r\n            },\r\n        ],\r\n        [id5]: [\r\n            {\r\n                id: v1(), message: 'people are out there making new year plans, getting married, going on vacation ' +\r\n                    'and here I am wondering what should I name class in my code'\r\n            },\r\n\r\n        ],\r\n    }\r\n}\r\ntype SendMessageActionType = ReturnType<typeof sendMessageActionCreator>\r\nexport type DialogsActionType = SendMessageActionType\r\n\r\nexport const dialogsReducer = (state: messagesPageType = initialState, action: DialogsActionType): messagesPageType => {\r\n    switch (action.type) {\r\n        case 'SEND-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messagesData: {\r\n                    ...state.messagesData,\r\n                    [action.userId]: [...state.messagesData[action.userId], {id: v1(), message: action.message}]\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport let sendMessageActionCreator = (message: string, userId: string) => {\r\n    return {type: \"SEND-MESSAGE\", message, userId} as const\r\n}\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype mapStateToPropsType={\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps=(state: AppStateType):mapStateToPropsType=>{\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>)  {\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps}=props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent=connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n\r\n}","import React from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {messagesPageType, sendMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype mapStateToPropsType={\r\n    dialogsPage: messagesPageType\r\n\r\n}\r\ntype mapDispatchToPropsType={\r\n    sendMessage: (message: string, userId: string) =>void\r\n}\r\nexport type DialogsPropsType=mapStateToPropsType&mapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType):mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:Dispatch):mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (message: string, userId: string) => {\r\n            dispatch(sendMessageActionCreator(message,userId));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps))(Dialogs);","import {ContactsType, ProfileType, updateProfileDescription} from \"../../../redux/profile-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {\r\n    Checkbox,\r\n    createTheme,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    TextField,\r\n    ThemeProvider\r\n} from \"@mui/material\";\r\nimport React from \"react\";\r\nimport cs from \"../../../assets/Common.module.css\";\r\nimport CircleUnchecked from \"@mui/icons-material/RadioButtonUnchecked\";\r\nimport CircleCheckedFilled from \"@mui/icons-material/CheckCircle\";\r\n\r\n\r\nexport type ProfileDescriptionFormDataType = {\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    aboutMe: string\r\n}\r\n\r\nexport type ProfileDescriptionFormPropsType = {\r\n    profile: ProfileType\r\n    userId: number\r\n    switchOffEditMode: () => void\r\n}\r\n\r\nexport const ProfileDescriptionForm = ({profile, userId, ...props}: ProfileDescriptionFormPropsType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {register, handleSubmit} = useForm<ProfileDescriptionFormDataType>({\r\n        defaultValues: {\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            fullName: profile.fullName,\r\n            aboutMe: profile.aboutMe,\r\n            contacts: profile.contacts\r\n        },\r\n        mode: 'onBlur'\r\n    });\r\n\r\n    const theme = createTheme({\r\n        typography: {\r\n            fontFamily: `\"Montserrat\",  sans-serif`,\r\n            fontWeightRegular: 500,\r\n        },\r\n        palette: {\r\n            primary: {\r\n                main: '#104f9e'\r\n            }\r\n        }\r\n    })\r\n\r\n    const onSubmit = (data: ProfileDescriptionFormDataType) => {\r\n        dispatch(updateProfileDescription(data, userId));\r\n        props.switchOffEditMode()\r\n    }\r\n\r\n    return   <ThemeProvider theme={theme}>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <FormGroup>\r\n                        <FormControlLabel label={'lookingForAJob'} control={\r\n                            <Checkbox   icon={<CircleUnchecked/>}\r\n                                        checkedIcon={<CircleCheckedFilled/>}\r\n                                        sx={{\r\n                                            color: \"#104f9e\",\r\n                                            '&.Mui-checked': {\r\n                                                color: \"#104f9e\",\r\n                                            },\r\n                                            borderRadius: '50%',\r\n                                        }}    {...register('lookingForAJob')}\r\n                            />}\r\n                        />\r\n                        <TextField label=\"lookingForAJobDescription\"\r\n                                   margin=\"normal\" variant=\"standard\"\r\n                                   {...register('lookingForAJobDescription')}\r\n                        />\r\n                        <TextField label=\"fullName\"\r\n                                   margin=\"normal\" variant=\"standard\"\r\n                                   {...register('fullName')}\r\n                        />\r\n\r\n                        <TextField label=\"aboutMe\"\r\n                                   margin=\"normal\" variant=\"standard\"\r\n                                   {...register('aboutMe')}\r\n                        />\r\n\r\n                        {Object.keys(profile.contacts).map(contact => {\r\n                            const contactName = 'contacts.' + contact as \"contacts.github\" | \"contacts.vk\" | \"contacts.facebook\" | \"contacts.instagram\" | \"contacts.twitter\" | \"contacts.website\" | \"contacts.youtube\" | \"contacts.mainLink\"\r\n                            return <TextField label={contact}\r\n                                              margin=\"normal\" variant=\"standard\"\r\n                                              {...register(contactName)}\r\n                            />\r\n                        })}\r\n\r\n                        <div style={{display:\"flex\", justifyContent:\"flex-start\"}}>\r\n                            <button type={'submit'} className={`${cs.button}`}>\r\n                                Edit\r\n                            </button>\r\n                        </div>\r\n\r\n                    </FormGroup>\r\n                </form>\r\n    </ThemeProvider>\r\n\r\n}\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateUserStatus} from \"../../../../redux/profile-reducer\";\r\nimport s from \"../ProfileInfo.module.css\";\r\nimport {faPenNib} from '@fortawesome/free-solid-svg-icons'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport cs from '../../../../assets/Common.module.css'\r\ntype StatusType = {\r\n    status: string\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileStatus = (props: StatusType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        dispatch(updateUserStatus(status))\r\n    }\r\n    const deactivateViewMode = () => {\r\n        props.isOwner && setEditMode(true)\r\n    }\r\n\r\n    return <div>\r\n        <span className={s.textHeader}>status :</span>\r\n        {editMode && <input className={cs.input} onChange={onChange} autoFocus value={status}\r\n                       onBlur={activateViewMode}/>}\r\n\r\n        {!editMode && <span onDoubleClick={deactivateViewMode } className={s.desc}>\r\n            {props.isOwner &&<span> <FontAwesomeIcon size={\"1x\"} icon={faPenNib}/>... </span>}\r\n            <span>{status ? status: 'no status'}</span>\r\n            </span>}\r\n    </div>\r\n}","import s from \"./ProfileInfo.module.css\";\r\nimport cs from \"../../../assets/Common.module.css\";\r\nimport userPhoto from \"../../../assets/userPhoto.jpg\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faImages, faUserEdit} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {ProfileStatus} from \"./Status/ProfileStatus\";\r\nimport React, {ChangeEvent, MutableRefObject, useRef} from \"react\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype ProfileDescriptionPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    updatePhoto: (file: File) => void\r\n    userId: number\r\n    switchOnEditMode: () => void\r\n}\r\n\r\nexport const ProfileDescription = (props: ProfileDescriptionPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const selectPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            dispatch(props.updatePhoto(e.target.files[0]))\r\n        }\r\n    }\r\n    const fileInput = useRef() as MutableRefObject<HTMLInputElement>\r\n\r\n    return <div className={s.mainBlock}>\r\n                <div className={`${cs.container} ${s.mainProfileDescContainer}`}>\r\n                    <div className={s.flex}>\r\n                        <div>\r\n                            <div>\r\n                                <img className={s.userPhoto}\r\n                                     src={props.profile.photos.large ? props.profile.photos.large : userPhoto}/>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            {props.isOwner && <div>\r\n                                <input style={{display: 'none'}} ref={fileInput} type=\"file\"\r\n                                       onChange={selectPhoto}/>\r\n                                <button className={`${cs.button} ${s.editButton}`}\r\n                                        onClick={() => fileInput.current.click()}>\r\n                                    <FontAwesomeIcon size={\"lg\"} icon={faImages}/>\r\n                                </button>\r\n                            </div>}\r\n                        </div>\r\n                    </div>\r\n                    {props.isOwner\r\n                        ? <div className={s.name}> {props.profile.fullName}</div>\r\n                        : <div style={{textAlign: 'center'}} className={s.name}> {props.profile.fullName}</div>}\r\n                </div>\r\n                <div className={`${cs.container} ${s.jobDescContainer}`}>\r\n\r\n                    <div className={s.desc}><span\r\n                        className={s.textHeader}>aboutMe: </span>{props.profile.aboutMe? props.profile.aboutMe :'no info' }</div>\r\n                    <ProfileStatus isOwner={props.isOwner} status={props.status}/>\r\n                    <div className={s.desc}><span\r\n                        className={s.textHeader}>lookingForAJob:</span> {props.profile.lookingForAJob ? 'I am looking for a job' : 'I am not looking for a job'}\r\n                    </div>\r\n                    {props.profile.lookingForAJob &&\r\n                    <div className={s.desc}><span\r\n                        className={s.textHeader}>lookingForAJobDescription:</span> {props.profile.lookingForAJobDescription}\r\n                    </div>}\r\n                    {props.isOwner &&\r\n                    <div className={s.buttonContainer}>\r\n                        <button className={`${cs.button} ${s.editButton}`} onClick={props.switchOnEditMode}>\r\n                            <FontAwesomeIcon size={\"lg\"} icon={faUserEdit}/>\r\n                        </button>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n\r\n}","import s from \"./ProfileInfo.module.css\";\r\nimport cs from \"../../../assets/Common.module.css\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {ContactsType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\nimport {faFacebookF, faGithub, faInstagram, faTwitter, faVk, faYoutube} from \"@fortawesome/free-brands-svg-icons\";\r\nimport {faLaptopHouse, faPaperclip} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst contactImages = {\r\n    github: faGithub,\r\n    vk: faVk,\r\n    facebook: faFacebookF,\r\n    instagram: faInstagram,\r\n    twitter: faTwitter,\r\n    website: faLaptopHouse,\r\n    youtube: faYoutube,\r\n    mainLink: faPaperclip\r\n}\r\n\r\ntype ProfileContactsPropsType={\r\n    profile: ProfileType\r\n}\r\n\r\nexport const ProfileContacts = (props: ProfileContactsPropsType) => {\r\n\r\n    return  <div>\r\n        <div className={s.contactsContainer}>\r\n            {Object.keys(props.profile.contacts).map(contact => {\r\n\r\n                return <div key={contact}\r\n                                className={`${cs.container} ${s.contactContainer}`}>\r\n                    <div className={s.iconContainer}>\r\n                        <FontAwesomeIcon size={\"2x\"}\r\n                                         icon={contactImages[contact as keyof ContactsType]}/>\r\n                    </div>\r\n                    <div className={s.contactDescContainer}>\r\n                        <div className={s.contact}>{contact}</div>\r\n                        <div>\r\n                            <a className={s.contactValue}\r\n                               href={props.profile.contacts[contact as keyof ContactsType]}>\r\n                                {props.profile.contacts[contact as keyof ContactsType] ? 'click here to go' : 'no link'}\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            })}\r\n        </div>\r\n    </div>\r\n\r\n}","import React, {useState} from 'react';\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader\";\r\nimport {ProfileDescriptionForm} from \"./ProfileDescriptionForm\";\r\nimport {ProfileDescription} from \"./ProfileDescription\";\r\nimport {ProfileContacts} from \"./ProfileContacts\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    updatePhoto: (file: File) => void\r\n    userId: number\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!Object.keys(props.profile).length) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return <>\r\n        {!editMode\r\n            ? <div>\r\n                <div>\r\n                    <ProfileDescription profile={props.profile} status={props.status}\r\n                                        isOwner={props.isOwner} updatePhoto={props.updatePhoto}\r\n                                        userId={props.userId} switchOnEditMode={() => setEditMode(true)}/>\r\n                    <ProfileContacts profile={props.profile}/>\r\n                </div>\r\n            </div>\r\n            : <div>\r\n                <ProfileDescriptionForm userId={props.userId} profile={props.profile}\r\n                                        switchOffEditMode={() => setEditMode(false)}/>\r\n            </div>\r\n        }\r\n    </>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    updatePhoto: (file: File) => void\r\n    userId: number\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo status={props.status}\r\n                         profile={props.profile}\r\n                         isOwner={props.isOwner}\r\n                         updatePhoto={props.updatePhoto}\r\n                         userId={props.userId}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {ProfileType, getUserProfile, getUserStatus, updatePhoto} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype PathParamsType = {\r\n    userId: number\r\n}\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isAuth: boolean\r\n    userId: number\r\n}\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updatePhoto: (file: File) => void\r\n}\r\ntype OwnPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n// @ts-ignore\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let id = this.props.match.params.userId;\r\n        if (!id) {\r\n            this.props.userId\r\n                ? id = this.props.userId\r\n                : this.props.history.push('/login');\r\n        }\r\n        this.props.getUserProfile(id);\r\n        this.props.getUserStatus(id)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        let id = this.props.match.params.userId;\r\n        if (id !== prevProps.match.params.userId) {\r\n            if (!id) {\r\n                this.props.userId\r\n                    ? id = this.props.userId\r\n                    : this.props.history.push('/login');\r\n            }\r\n            this.props.getUserProfile(id);\r\n            this.props.getUserStatus(id)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     userId={this.props.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     updatePhoto={updatePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    userId: state.auth.id\r\n}) as mapStateToPropsType;\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updatePhoto}),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n","import React from 'react';\r\nimport style from './App.module.css';\r\nimport {Route, withRouter} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport MyPostsContainer from \"./components/Profile/MyPosts/MyPostsContainer\";\r\nimport Preloader from \"./components/common/Preloader\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\n\r\ntype mapStateToPropsType = {\r\n    isInitialized: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\nexport type AppComponentType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass App extends React.Component<AppComponentType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.isInitialized) {\r\n            return <div><Preloader/></div>\r\n        }\r\n\r\n        return (\r\n            <div className={style.appWrapper}>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className={style.appWrapperContent}>\r\n                    <Route path='/dialogs'\r\n                           render={()=><DialogsContainer/>}/>\r\n                    <Route path='/profile/:userId?'\r\n                           render={()=><ProfileContainer/>}/>\r\n                    <Route path='/users'\r\n                           render={() => <UsersContainer/>}/>\r\n                    <Route path='/login'\r\n                           render={() => <Login/>}/>\r\n                    <Route path='/posts'\r\n                           render={() => <MyPostsContainer/>}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isInitialized: state.app.isInitialized\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport authReducer, {AuthActionsType} from \"./auth-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {ProfileActionType, profileReducer} from \"./profile-reducer\";\r\nimport usersReducer, {UsersActionsType} from \"./users-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport {AppActionsType, appReducer} from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport type AllActionsType = AuthActionsType | AppActionsType | ProfileActionType |UsersActionsType;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AllActionsType>\r\n\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const appStore = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {appStore} from \"./redux/redux-store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={appStore}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root')\r\n)\r\n\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsContainer\":\"ProfileInfo_contactsContainer__1BM-A\",\"contactContainer\":\"ProfileInfo_contactContainer__1SGCa\",\"iconContainer\":\"ProfileInfo_iconContainer__WiAlG\",\"contact\":\"ProfileInfo_contact__3V1By\",\"contactDescContainer\":\"ProfileInfo_contactDescContainer__2oEIy\",\"contactValue\":\"ProfileInfo_contactValue__16MJS\",\"editButton\":\"ProfileInfo_editButton__1t7HM\",\"userPhoto\":\"ProfileInfo_userPhoto__2pizE\",\"name\":\"ProfileInfo_name__1tQty\",\"mainProfileDescContainer\":\"ProfileInfo_mainProfileDescContainer__14Zn7\",\"flex\":\"ProfileInfo_flex__NBfdw\",\"jobDescContainer\":\"ProfileInfo_jobDescContainer__6pvzj\",\"mainBlock\":\"ProfileInfo_mainBlock__3WxOV\",\"textHeader\":\"ProfileInfo_textHeader__2IvZ2\",\"desc\":\"ProfileInfo_desc__3zz2w\",\"buttonContainer\":\"ProfileInfo_buttonContainer__gfXc3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersContainer\":\"Dialogs_usersContainer__3Jfqp\",\"userPhoto\":\"Dialogs_userPhoto__1kH6N\",\"userContainer\":\"Dialogs_userContainer__32QTU\",\"addMessageContainer\":\"Dialogs_addMessageContainer__iIOCE\",\"name\":\"Dialogs_name__3-cPl\",\"textarea\":\"Dialogs_textarea__ba3TG\",\"active\":\"Dialogs_active__3M1Zg\",\"messages\":\"Dialogs_messages__J5Urf\",\"button\":\"Dialogs_button__3VkOg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginatorCont\":\"Paginator_paginatorCont__3C0qU\",\"pagesContainer\":\"Paginator_pagesContainer__jnQVB\",\"page\":\"Paginator_page__2mIEi\",\"button\":\"Paginator_button__2-KHL\",\"selectedPage\":\"Paginator_selectedPage__vwed8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"NavbarItem_item__x3nGd\",\"icon\":\"NavbarItem_icon__1fA5b\",\"navlinkCont\":\"NavbarItem_navlinkCont__32Oo7\",\"activeLink\":\"NavbarItem_activeLink__3AJEa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2Fguy\",\"posts\":\"MyPosts_posts__3fOt8\",\"header\":\"MyPosts_header__yfGcQ\",\"addPostContainer\":\"MyPosts_addPostContainer__1mqKj\",\"textarea\":\"MyPosts_textarea__2TEWL\",\"addButton\":\"MyPosts_addButton__fCuVj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Post_container__23mzw\",\"item\":\"Post_item__24Wq_\",\"userPhoto\":\"Post_userPhoto__1MteQ\",\"descContainer\":\"Post_descContainer__3GGyV\",\"name\":\"Post_name__2G6z7\",\"date\":\"Post_date__3eRgI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userContainer\":\"User_userContainer__11UAK\",\"imgContainer\":\"User_imgContainer__1VjaF\",\"descContainer\":\"User_descContainer__Z7yzT\",\"name\":\"User_name__srShN\",\"status\":\"User_status__j9l_C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__3Oo3V\",\"container\":\"Login_container__1HrBB\",\"input\":\"Login_input__2qEfl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2eFGY\",\"cont\":\"Header_cont__2DEQv\",\"login\":\"Header_login__1ESPo\",\"button\":\"Header_button__2CM0j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__1oSX9\",\"usersContainer\":\"Users_usersContainer__3ewtF\"};"],"sourceRoot":""}